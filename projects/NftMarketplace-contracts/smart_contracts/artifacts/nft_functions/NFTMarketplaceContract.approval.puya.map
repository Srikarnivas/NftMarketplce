{
  "version": 3,
  "sources": [
    "../../nft_functions/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AA+CK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAjCL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiCK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3BL;;;AAAA;AA2BK;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAXL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AALL;;;AAAA;AAAA;;AAAA;;;AAAA;AAKK;;;AAAA;;AAAL;;;AAEQ;AAAc;;AAAd;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACW;;AAAqD;AAAA;AAAA;AAAA;AAArD;AAAA;;AAAA;;AAAA;;AAAJ;AAAP;AAEO;;AAAA;;AAAmB;;AAAnB;AAAP;AAEO;;AAAA;;AAAiB;;AAAqB;;AAArB;AAAjB;AAAP;AAEA;AAEoB;;AACF;;;;;;;AAHlB;;;AAIQ;;;AAJR;;AAOR;;;AAEe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACA;AAAA;;AAAA;;AAGR;;;AAEe;;AAAA;;AAAmB;;AAAnB;AAAP;AACO;;AAAA;;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAP;AACO;;AAAA;;AAAmB;AAAA;AAAA;AAAA;AAAnB;AAAP;AAEA;AACa;;AACG;AAAA;AAAA;AAAA;AACI;;AACF;;;;;;;;;AAJlB;;;AAAA;;;AAAA;AAMA;AAAc;;AAAd;;AAIO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAP;AAEA;AACe;AAAA;AAAA;AAAA;;;;;AAEE;;;;;;;AAHjB;;;AAKQ;;;;;AALR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4"
    },
    "6": {
      "op": "bytecblock \"holder\" \"assetid\" \"price\""
    },
    "29": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "31": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "34": {
      "op": "pushbytess 0x3845bed4 0x1574535a 0xcc760037 0x958d3df9 0x33b3499e // method \"create_marketplace_application(asset,uint64)void\", method \"opt_in_to_asset(pay)void\", method \"set_price(uint64)void\", method \"buy(pay)void\", method \"delete_application()void\"",
      "defined_out": [
        "Method(buy(pay)void)",
        "Method(create_marketplace_application(asset,uint64)void)",
        "Method(delete_application()void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(set_price(uint64)void)"
      ],
      "stack_out": [
        "Method(create_marketplace_application(asset,uint64)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(set_price(uint64)void)",
        "Method(buy(pay)void)",
        "Method(delete_application()void)"
      ]
    },
    "61": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(buy(pay)void)",
        "Method(create_marketplace_application(asset,uint64)void)",
        "Method(delete_application()void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(set_price(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_marketplace_application(asset,uint64)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(set_price(uint64)void)",
        "Method(buy(pay)void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "64": {
      "op": "match main_create_marketplace_application_route@3 main_opt_in_to_asset_route@4 main_set_price_route@5 main_buy_route@6 main_delete_application_route@7",
      "stack_out": []
    },
    "76": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "return",
      "stack_out": []
    },
    "78": {
      "block": "main_delete_application_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "80": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "DeleteApplication"
      ]
    },
    "82": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "83": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "84": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "86": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "87": {
      "callsub": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.delete_application",
      "op": "callsub delete_application"
    },
    "90": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "block": "main_buy_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "94": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "95": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "98": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "99": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "1"
      ]
    },
    "102": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "103": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "104": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "106": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "107": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "108": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "109": {
      "callsub": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.buy",
      "op": "callsub buy",
      "stack_out": []
    },
    "112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "113": {
      "op": "return",
      "stack_out": []
    },
    "114": {
      "block": "main_set_price_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "116": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "117": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "118": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "120": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "121": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "124": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "125": {
      "callsub": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.set_price",
      "op": "callsub set_price",
      "stack_out": []
    },
    "128": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    },
    "130": {
      "block": "main_opt_in_to_asset_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "132": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "133": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "136": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "137": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "139": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "140": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "141": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "142": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "144": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "145": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "146": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "147": {
      "callsub": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.opt_in_to_asset",
      "op": "callsub opt_in_to_asset",
      "stack_out": []
    },
    "150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "return",
      "stack_out": []
    },
    "152": {
      "block": "main_create_marketplace_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "154": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "155": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "158": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "159": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "160": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "163": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "164": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "166": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "169": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "170": {
      "callsub": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.create_marketplace_application",
      "op": "callsub create_marketplace_application",
      "stack_out": []
    },
    "173": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "return",
      "stack_out": []
    },
    "175": {
      "subroutine": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.create_marketplace_application",
      "params": {
        "asset_id#0": "uint64",
        "price#0": "uint64"
      },
      "block": "create_marketplace_application",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "178": {
      "op": "bytec_0 // \"holder\"",
      "defined_out": [
        "\"holder\""
      ],
      "stack_out": [
        "\"holder\""
      ]
    },
    "179": {
      "op": "txn Sender",
      "defined_out": [
        "\"holder\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"holder\"",
        "materialized_values%0#0"
      ]
    },
    "181": {
      "op": "app_global_put",
      "stack_out": []
    },
    "182": {
      "op": "bytec_1 // \"assetid\"",
      "defined_out": [
        "\"assetid\""
      ],
      "stack_out": [
        "\"assetid\""
      ]
    },
    "183": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"assetid\"",
        "asset_id#0 (copy)"
      ],
      "stack_out": [
        "\"assetid\"",
        "asset_id#0 (copy)"
      ]
    },
    "185": {
      "op": "app_global_put",
      "stack_out": []
    },
    "186": {
      "op": "bytec_2 // \"price\"",
      "defined_out": [
        "\"price\""
      ],
      "stack_out": [
        "\"price\""
      ]
    },
    "187": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"price\"",
        "price#0 (copy)"
      ],
      "stack_out": [
        "\"price\"",
        "price#0 (copy)"
      ]
    },
    "189": {
      "op": "app_global_put",
      "stack_out": []
    },
    "190": {
      "retsub": true,
      "op": "retsub"
    },
    "191": {
      "subroutine": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.opt_in_to_asset",
      "params": {
        "mbrpay#0": "uint64"
      },
      "block": "opt_in_to_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "194": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "196": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "199": {
      "op": "assert",
      "stack_out": []
    },
    "200": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "202": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "203": {
      "op": "bytec_1 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"assetid\""
      ]
    },
    "204": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "205": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "207": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "209": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "211": {
      "op": "bury 1",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%5#0"
      ]
    },
    "213": {
      "op": "!",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%6#0"
      ]
    },
    "214": {
      "op": "assert",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "215": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "mbrpay#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "mbrpay#0 (copy)"
      ]
    },
    "217": {
      "op": "gtxns Receiver",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%7#0"
      ]
    },
    "219": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "221": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%9#0"
      ]
    },
    "222": {
      "op": "assert",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "223": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "mbrpay#0 (copy)"
      ]
    },
    "225": {
      "op": "gtxns Amount",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%10#0"
      ]
    },
    "227": {
      "op": "global MinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "229": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "231": {
      "op": "+",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "232": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%14#0"
      ]
    },
    "233": {
      "op": "assert",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "234": {
      "op": "itxn_begin"
    },
    "235": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "238": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "240": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "242": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "244": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "245": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "247": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "248": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "250": {
      "op": "itxn_submit"
    },
    "251": {
      "retsub": true,
      "op": "retsub"
    },
    "252": {
      "subroutine": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.set_price",
      "params": {
        "price#0": "uint64"
      },
      "block": "set_price",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "255": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "258": {
      "op": "bytec_0 // \"holder\"",
      "defined_out": [
        "\"holder\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"holder\""
      ]
    },
    "259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "260": {
      "error": "check self.holder exists",
      "op": "assert // check self.holder exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "261": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "262": {
      "op": "assert",
      "stack_out": []
    },
    "263": {
      "op": "bytec_2 // \"price\"",
      "defined_out": [
        "\"price\""
      ],
      "stack_out": [
        "\"price\""
      ]
    },
    "264": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"price\"",
        "price#0 (copy)"
      ],
      "stack_out": [
        "\"price\"",
        "price#0 (copy)"
      ]
    },
    "266": {
      "op": "app_global_put",
      "stack_out": []
    },
    "267": {
      "retsub": true,
      "op": "retsub"
    },
    "268": {
      "subroutine": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.buy",
      "params": {
        "buyerTxn#0": "uint64"
      },
      "block": "buy",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "271": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyerTxn#0 (copy)"
      ],
      "stack_out": [
        "buyerTxn#0 (copy)"
      ]
    },
    "273": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "275": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "277": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "278": {
      "op": "assert",
      "stack_out": []
    },
    "279": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyerTxn#0 (copy)"
      ]
    },
    "281": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "283": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "284": {
      "op": "bytec_0 // \"holder\"",
      "defined_out": [
        "\"holder\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"holder\""
      ]
    },
    "285": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "286": {
      "error": "check self.holder exists",
      "op": "assert // check self.holder exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "287": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "288": {
      "op": "assert",
      "stack_out": []
    },
    "289": {
      "op": "frame_dig -1",
      "stack_out": [
        "buyerTxn#0 (copy)"
      ]
    },
    "291": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "293": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "294": {
      "op": "bytec_2 // \"price\"",
      "defined_out": [
        "\"price\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"price\""
      ]
    },
    "295": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "296": {
      "error": "check self.price exists",
      "op": "assert // check self.price exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "297": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "298": {
      "op": "assert",
      "stack_out": []
    },
    "299": {
      "op": "itxn_begin"
    },
    "300": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "302": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0"
      ]
    },
    "303": {
      "op": "bytec_1 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0",
        "\"assetid\""
      ]
    },
    "304": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "305": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "306": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "308": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "1"
      ]
    },
    "309": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "311": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "313": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "315": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "317": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "318": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "320": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "321": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "323": {
      "op": "itxn_submit"
    },
    "324": {
      "op": "bytec_0 // \"holder\"",
      "stack_out": [
        "\"holder\""
      ]
    },
    "325": {
      "op": "txn Sender",
      "defined_out": [
        "\"holder\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"holder\"",
        "materialized_values%0#0"
      ]
    },
    "327": {
      "op": "app_global_put",
      "stack_out": []
    },
    "328": {
      "retsub": true,
      "op": "retsub"
    },
    "329": {
      "subroutine": "smart_contracts.nft_functions.contract.NFTMarketplaceContract.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "331": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "332": {
      "op": "bytec_0 // \"holder\"",
      "defined_out": [
        "\"holder\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"holder\""
      ]
    },
    "333": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "334": {
      "error": "check self.holder exists",
      "op": "assert // check self.holder exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "335": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "336": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "338": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "339": {
      "op": "assert",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "340": {
      "op": "itxn_begin"
    },
    "341": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "342": {
      "op": "bytec_1 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"assetid\""
      ]
    },
    "343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "344": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "345": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "347": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "349": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "350": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "352": {
      "op": "itxn_field XferAsset"
    },
    "354": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "356": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "357": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "359": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "362": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "364": {
      "op": "itxn_submit"
    },
    "365": {
      "retsub": true,
      "op": "retsub"
    }
  }
}