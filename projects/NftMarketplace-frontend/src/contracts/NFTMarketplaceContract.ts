/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"NFTMarketplaceContract","structs":{},"methods":[{"name":"create_marketplace_application","args":[{"type":"asset","name":"asset_id"},{"type":"uint64","name":"price"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in_to_asset","args":[{"type":"pay","name":"mbrpay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_price","args":[{"type":"uint64","name":"price"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"buy","args":[{"type":"pay","name":"buyerTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete_application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"asset_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfaWQ="},"price":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJpY2U="},"holder":{"keyType":"AVMString","valueType":"address","key":"aG9sZGVy"},"assetid":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRpZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[83],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[95,117,133,155],"errorMessage":"OnCompletion is not NoOp"},{"pc":[159],"errorMessage":"can only call when creating"},{"pc":[86,98,120,136],"errorMessage":"can only call when not creating"},{"pc":[205,305,344],"errorMessage":"check self.assetid exists"},{"pc":[260,286,334],"errorMessage":"check self.holder exists"},{"pc":[296],"errorMessage":"check self.price exists"},{"pc":[108,146],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAEEJgMGaG9sZGVyB2Fzc2V0aWQFcHJpY2UxG0EAKoIFBDhFvtQEFXRTWgTMdgA3BJWNPfkEM7NJnjYaAI4FAEwANgAmABAAAiJDMRmBBRJEMRhEiADvI0MxGRREMRhEMRYjCUk4ECMSRIgAnCNDMRkURDEYRDYaAReIAHwjQzEZFEQxGEQxFiMJSTgQIxJEiAApI0MxGRREMRgURDYaARfAMDYaAheIAAIjQ4oCACgxAGcpi/5nKov/Z4mKAQAxADIJEkQyCiIpZURMSwFwAEUBFESL/zgHMgoSRIv/OAgyATIQCBJEsTIKIrISshSyESSyECKyAbOJigEAMQAiKGVEEkQqi/9niYoBAIv/OAAxABJEi/84ByIoZUQSRIv/OAgiKmVEEkSxMgoiKWVEMQAjshKyFLIRsgAkshAisgGzKDEAZ4kxACIoZURMSwESRLEiKWVESwGyFSKyErIRshQkshCB6AeyAbOJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the NftMarketplaceContract contract
 */
export type NftMarketplaceContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_marketplace_application(asset,uint64)void': {
      assetId: bigint
      price: bigint | number
    }
    'opt_in_to_asset(pay)void': {
      mbrpay: AppMethodCallTransactionArgument
    }
    'set_price(uint64)void': {
      price: bigint | number
    }
    'buy(pay)void': {
      buyerTxn: AppMethodCallTransactionArgument
    }
    'delete_application()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_marketplace_application(asset,uint64)void': [assetId: bigint, price: bigint | number]
    'opt_in_to_asset(pay)void': [mbrpay: AppMethodCallTransactionArgument]
    'set_price(uint64)void': [price: bigint | number]
    'buy(pay)void': [buyerTxn: AppMethodCallTransactionArgument]
    'delete_application()void': []
  }
}

/**
 * The return type for each method
 */
export type NftMarketplaceContractReturns = {
  'create_marketplace_application(asset,uint64)void': void
  'opt_in_to_asset(pay)void': void
  'set_price(uint64)void': void
  'buy(pay)void': void
  'delete_application()void': void
}

/**
 * Defines the types of available calls and state of the NftMarketplaceContract smart contract.
 */
export type NftMarketplaceContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_marketplace_application(asset,uint64)void' | 'create_marketplace_application', {
      argsObj: NftMarketplaceContractArgs['obj']['create_marketplace_application(asset,uint64)void']
      argsTuple: NftMarketplaceContractArgs['tuple']['create_marketplace_application(asset,uint64)void']
      returns: NftMarketplaceContractReturns['create_marketplace_application(asset,uint64)void']
    }>
    & Record<'opt_in_to_asset(pay)void' | 'opt_in_to_asset', {
      argsObj: NftMarketplaceContractArgs['obj']['opt_in_to_asset(pay)void']
      argsTuple: NftMarketplaceContractArgs['tuple']['opt_in_to_asset(pay)void']
      returns: NftMarketplaceContractReturns['opt_in_to_asset(pay)void']
    }>
    & Record<'set_price(uint64)void' | 'set_price', {
      argsObj: NftMarketplaceContractArgs['obj']['set_price(uint64)void']
      argsTuple: NftMarketplaceContractArgs['tuple']['set_price(uint64)void']
      returns: NftMarketplaceContractReturns['set_price(uint64)void']
    }>
    & Record<'buy(pay)void' | 'buy', {
      argsObj: NftMarketplaceContractArgs['obj']['buy(pay)void']
      argsTuple: NftMarketplaceContractArgs['tuple']['buy(pay)void']
      returns: NftMarketplaceContractReturns['buy(pay)void']
    }>
    & Record<'delete_application()void' | 'delete_application', {
      argsObj: NftMarketplaceContractArgs['obj']['delete_application()void']
      argsTuple: NftMarketplaceContractArgs['tuple']['delete_application()void']
      returns: NftMarketplaceContractReturns['delete_application()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetId: bigint
        price: bigint
        holder: string
        assetid: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type NftMarketplaceContractSignatures = keyof NftMarketplaceContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NftMarketplaceContractNonVoidMethodSignatures = keyof NftMarketplaceContractTypes['methods'] extends infer T ? T extends keyof NftMarketplaceContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the NftMarketplaceContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NftMarketplaceContractSignatures> = NftMarketplaceContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NftMarketplaceContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NftMarketplaceContractSignatures> = NftMarketplaceContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = NftMarketplaceContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type NftMarketplaceContractCreateCallParams =
  | Expand<CallParams<NftMarketplaceContractArgs['obj']['create_marketplace_application(asset,uint64)void'] | NftMarketplaceContractArgs['tuple']['create_marketplace_application(asset,uint64)void']> & {method: 'create_marketplace_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<NftMarketplaceContractArgs['obj']['create_marketplace_application(asset,uint64)void'] | NftMarketplaceContractArgs['tuple']['create_marketplace_application(asset,uint64)void']> & {method: 'create_marketplace_application(asset,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type NftMarketplaceContractDeleteCallParams =
  | Expand<CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']> & {method: 'delete_application'}>
  | Expand<CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']> & {method: 'delete_application()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type NftMarketplaceContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: NftMarketplaceContractCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: NftMarketplaceContractDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the NftMarketplaceContract smart contract
 */
export abstract class NftMarketplaceContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends NftMarketplaceContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_marketplace_application':
          case 'create_marketplace_application(asset,uint64)void':
            return NftMarketplaceContractParamsFactory.create.createMarketplaceApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the NFTMarketplaceContract smart contract using the create_marketplace_application(asset,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createMarketplaceApplication(params: CallParams<NftMarketplaceContractArgs['obj']['create_marketplace_application(asset,uint64)void'] | NftMarketplaceContractArgs['tuple']['create_marketplace_application(asset,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_marketplace_application(asset,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.price],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends NftMarketplaceContractDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_application':
          case 'delete_application()void':
            return NftMarketplaceContractParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the NFTMarketplaceContract smart contract using the delete_application()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_application()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the opt_in_to_asset(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<NftMarketplaceContractArgs['obj']['opt_in_to_asset(pay)void'] | NftMarketplaceContractArgs['tuple']['opt_in_to_asset(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_to_asset(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrpay],
    }
  }
  /**
   * Constructs a no op call for the set_price(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPrice(params: CallParams<NftMarketplaceContractArgs['obj']['set_price(uint64)void'] | NftMarketplaceContractArgs['tuple']['set_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.price],
    }
  }
  /**
   * Constructs a no op call for the buy(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buy(params: CallParams<NftMarketplaceContractArgs['obj']['buy(pay)void'] | NftMarketplaceContractArgs['tuple']['buy(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyerTxn],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the NFTMarketplaceContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class NftMarketplaceContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `NftMarketplaceContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new NftMarketplaceContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new NftMarketplaceContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the NFTMarketplaceContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: NftMarketplaceContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? NftMarketplaceContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (NftMarketplaceContractCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? NftMarketplaceContractParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (NftMarketplaceContractDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new NftMarketplaceContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTMarketplaceContract smart contract using the create_marketplace_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createMarketplaceApplication: (params: CallParams<NftMarketplaceContractArgs['obj']['create_marketplace_application(asset,uint64)void'] | NftMarketplaceContractArgs['tuple']['create_marketplace_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(NftMarketplaceContractParamsFactory.create.createMarketplaceApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the NFTMarketplaceContract smart contract using the delete_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(NftMarketplaceContractParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTMarketplaceContract smart contract using the create_marketplace_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createMarketplaceApplication: (params: CallParams<NftMarketplaceContractArgs['obj']['create_marketplace_application(asset,uint64)void'] | NftMarketplaceContractArgs['tuple']['create_marketplace_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(NftMarketplaceContractParamsFactory.create.createMarketplaceApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTMarketplaceContract smart contract using an ABI method call using the create_marketplace_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createMarketplaceApplication: async (params: CallParams<NftMarketplaceContractArgs['obj']['create_marketplace_application(asset,uint64)void'] | NftMarketplaceContractArgs['tuple']['create_marketplace_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(NftMarketplaceContractParamsFactory.create.createMarketplaceApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | NftMarketplaceContractReturns['create_marketplace_application(asset,uint64)void']) }, appClient: new NftMarketplaceContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the NFTMarketplaceContract smart contract
 */
export class NftMarketplaceContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NftMarketplaceContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the NftMarketplaceContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NftMarketplaceContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NftMarketplaceContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `NftMarketplaceContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NftMarketplaceContractClient> {
    return new NftMarketplaceContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NftMarketplaceContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NftMarketplaceContractClient> {
    return new NftMarketplaceContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the NFTMarketplaceContract smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.params.delete(NftMarketplaceContractParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the NFTMarketplaceContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<NftMarketplaceContractArgs['obj']['opt_in_to_asset(pay)void'] | NftMarketplaceContractArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftMarketplaceContractParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPrice: (params: CallParams<NftMarketplaceContractArgs['obj']['set_price(uint64)void'] | NftMarketplaceContractArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftMarketplaceContractParamsFactory.setPrice(params))
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `buy(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buy: (params: CallParams<NftMarketplaceContractArgs['obj']['buy(pay)void'] | NftMarketplaceContractArgs['tuple']['buy(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftMarketplaceContractParamsFactory.buy(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the NFTMarketplaceContract smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(NftMarketplaceContractParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the NFTMarketplaceContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<NftMarketplaceContractArgs['obj']['opt_in_to_asset(pay)void'] | NftMarketplaceContractArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftMarketplaceContractParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPrice: (params: CallParams<NftMarketplaceContractArgs['obj']['set_price(uint64)void'] | NftMarketplaceContractArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftMarketplaceContractParamsFactory.setPrice(params))
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `buy(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buy: (params: CallParams<NftMarketplaceContractArgs['obj']['buy(pay)void'] | NftMarketplaceContractArgs['tuple']['buy(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftMarketplaceContractParamsFactory.buy(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the NFTMarketplaceContract smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(NftMarketplaceContractParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | NftMarketplaceContractReturns['delete_application()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the NFTMarketplaceContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<NftMarketplaceContractArgs['obj']['opt_in_to_asset(pay)void'] | NftMarketplaceContractArgs['tuple']['opt_in_to_asset(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftMarketplaceContractParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | NftMarketplaceContractReturns['opt_in_to_asset(pay)void'])}
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPrice: async (params: CallParams<NftMarketplaceContractArgs['obj']['set_price(uint64)void'] | NftMarketplaceContractArgs['tuple']['set_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftMarketplaceContractParamsFactory.setPrice(params))
      return {...result, return: result.return as unknown as (undefined | NftMarketplaceContractReturns['set_price(uint64)void'])}
    },

    /**
     * Makes a call to the NFTMarketplaceContract smart contract using the `buy(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buy: async (params: CallParams<NftMarketplaceContractArgs['obj']['buy(pay)void'] | NftMarketplaceContractArgs['tuple']['buy(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftMarketplaceContractParamsFactory.buy(params))
      return {...result, return: result.return as unknown as (undefined | NftMarketplaceContractReturns['buy(pay)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NftMarketplaceContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current NFTMarketplaceContract app
   */
  state = {
    /**
     * Methods to access global state for the current NFTMarketplaceContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetId: result.asset_id,
          price: result.price,
          holder: result.holder,
          assetid: result.assetid,
        }
      },
      /**
       * Get the current value of the asset_id key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_id")) as bigint | undefined },
      /**
       * Get the current value of the price key in global state
       */
      price: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("price")) as bigint | undefined },
      /**
       * Get the current value of the holder key in global state
       */
      holder: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("holder")) as string | undefined },
      /**
       * Get the current value of the assetid key in global state
       */
      assetid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetid")) as bigint | undefined },
    },
  }

  public newGroup(): NftMarketplaceContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a opt_in_to_asset(pay)void method call against the NFTMarketplaceContract contract
       */
      optInToAsset(params: CallParams<NftMarketplaceContractArgs['obj']['opt_in_to_asset(pay)void'] | NftMarketplaceContractArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_price(uint64)void method call against the NFTMarketplaceContract contract
       */
      setPrice(params: CallParams<NftMarketplaceContractArgs['obj']['set_price(uint64)void'] | NftMarketplaceContractArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buy(pay)void method call against the NFTMarketplaceContract contract
       */
      buy(params: CallParams<NftMarketplaceContractArgs['obj']['buy(pay)void'] | NftMarketplaceContractArgs['tuple']['buy(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buy(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the NFTMarketplaceContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NftMarketplaceContractComposer
  }
}
export type NftMarketplaceContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the opt_in_to_asset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<NftMarketplaceContractArgs['obj']['opt_in_to_asset(pay)void'] | NftMarketplaceContractArgs['tuple']['opt_in_to_asset(pay)void']>): NftMarketplaceContractComposer<[...TReturns, NftMarketplaceContractReturns['opt_in_to_asset(pay)void'] | undefined]>

  /**
   * Calls the set_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPrice(params?: CallParams<NftMarketplaceContractArgs['obj']['set_price(uint64)void'] | NftMarketplaceContractArgs['tuple']['set_price(uint64)void']>): NftMarketplaceContractComposer<[...TReturns, NftMarketplaceContractReturns['set_price(uint64)void'] | undefined]>

  /**
   * Calls the buy(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buy(params?: CallParams<NftMarketplaceContractArgs['obj']['buy(pay)void'] | NftMarketplaceContractArgs['tuple']['buy(pay)void']>): NftMarketplaceContractComposer<[...TReturns, NftMarketplaceContractReturns['buy(pay)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the NFTMarketplaceContract smart contract using the delete_application()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<NftMarketplaceContractArgs['obj']['delete_application()void'] | NftMarketplaceContractArgs['tuple']['delete_application()void']>): NftMarketplaceContractComposer<[...TReturns, NftMarketplaceContractReturns['delete_application()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the NFTMarketplaceContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NftMarketplaceContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NftMarketplaceContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NftMarketplaceContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NftMarketplaceContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NftMarketplaceContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NftMarketplaceContractComposerResults<TReturns>>
}
export type NftMarketplaceContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

